---
apiVersion: v1
kind: Namespace
metadata:
  name: home-assistant


---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    replicator.v1.mittwald.de/replicate-from: default/wildcard-colettifam-com-tls
  name: wildcard-colettifam-com-tls
  namespace: home-assistant
data:
  tls.crt: ""
  tls.key: ""
type: kubernetes.io/tls


#  location / {
#  proxy_pass http://localhost:$target_port;
#  proxy_set_header Host $host;
#  proxy_set_header X-Real-IP $remote_addr;
#
#  proxy_http_version 1.1;
#  proxy_set_header Upgrade $http_upgrade;
#  proxy_set_header Connection $connection_upgrade;
#  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#
#  proxy_buffering off;
#  }

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/server-snippets: |
      location / {
          include /config/nginx/proxy.conf;
          set $upstream_app 'this was my internal ip no quotes';
          set $upstream_port 8123;
          set $upstream_proto https;
          proxy_pass $upstream_proto://$upstream_app:$upstream_port;
      
          proxy_set_header Host $host;
      
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
      }
        
        location /api/websocket {
        
        include /config/nginx/proxy.conf;
        set $upstream_app 'this was my internal ip no quotes';
        set $upstream_port 8123;
        set $upstream_proto https;
        proxy_pass $upstream_proto://$upstream_app:$upstream_port/api/websocket;
        
        proxy_set_header Host $host;
        
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }
  name: home-assistant
  namespace: home-assistant
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - home.colettifam.com
      secretName: wildcard-colettifam-com-tls
  rules:
    - host: home.colettifam.com
      http:
        paths:
          - backend:
              service:
                name: home-assistant
                port:
                  number: 80
            path: /
            pathType: Prefix

---
apiVersion: v1
kind: Service
metadata:
  namespace: home-assistant
  name: home-assistant
spec:
  selector:
    app: home-assistant
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8123



---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: home-assistant-pvc
  labels:
    app: home-assistant
  annotations:
    volume.beta.kubernetes.io/storage-class: "nfs-client"
  namespace: home-assistant
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi


---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: home-assistant
  name: home-assistant
  labels:
    app: home-assistant
spec:
  replicas: 1
  selector:
    matchLabels:
      app: home-assistant
  template:
    metadata:
      labels:
        app: home-assistant
    spec:
      containers:
        - name: home-assistant
          image: homeassistant/home-assistant:2024.10.2
          #        resources:
          #          requests:
          #            memory: "1Gi"
          #          limits:
          #            memory: "1.5Gi"
          ports:
            - containerPort: 8123
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /config/configuration.yaml
              subPath: configuration.yaml
              name:  home-assistant-configmap
            - mountPath: /config/automations.yaml
              subPath: automations.yaml
              name:  home-assistant-configmap

          securityContext:
            privileged: true
      hostNetwork: true
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: home-assistant-pvc
        - name:  home-assistant-configmap
          configMap:
            name: home-assistant-configmap
---
apiVersion: v1
kind: Service
metadata:
  namespace: home-assistant
  name: zwavejs2mqtt
spec:
  selector:
    app: zwavejs2mqtt
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 8091
      targetPort: 8091
    - name: ws
      protocol: TCP
      port: 3000
      targetPort: 3000


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mosquitto
  namespace: home-assistant
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mosquitto
  template:
    metadata:
      labels:
        app: mosquitto
    spec:
      containers:
        - name: mosquitto
          image: arm64v8/eclipse-mosquitto
          securityContext:
            privileged: true
          ports:
            - containerPort: 1883
            - containerPort: 9001
      nodeSelector:
        workload: india
---
apiVersion: v1
kind: Service
metadata:
  namespace: home-assistant
  name: mosquitto-service
spec:
  selector:
    app: mosquitto-service
  type: ClusterIP
  ports:
    - name: mqtt
      protocol: TCP
      port: 1883
      targetPort: 1883
    - name: mqtt1
      protocol: TCP
      port: 9001
      targetPort: 9001

